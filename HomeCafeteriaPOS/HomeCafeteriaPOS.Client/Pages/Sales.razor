@page "/sales"
@using Microsoft.AspNetCore.SignalR.Client
@using HomeCafeteriaPOS.Client.Models
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h1>Sales History</h1>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>ID</th>
            <th>Date</th>
            <th>Total Amount</th>
            <th>Paid Amount</th>
            <th>Change</th>
            <th>Details</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var sale in sales.OrderByDescending(s => s.Date))
        {
            <tr>
                <td>@sale.Id</td>
                <td>@sale.Date.ToLocalTime()</td>
                <td>@sale.TotalAmount €</td>
                <td>@sale.PaidAmount €</td>
                <td>@sale.Change €</td>
                <td>
                    <button class="btn btn-info" @onclick="() => ToggleSaleDetails(sale.Id)">View</button>
                </td>
            </tr>
            @if (expandedSaleId == sale.Id)
            {
                <tr>
                    <td colspan="6">
                        <ul>
                            @foreach (var item in sale.Items)
                            {
                                <li>
                                    @item.Quantity x @item.ProductName - @(item.Quantity * item.Price) €
                                </li>
                            }
                        </ul>
                        <p><strong>Total Amount:</strong> @sale.TotalAmount €</p>
                        <p><strong>Paid Amount:</strong> @sale.PaidAmount €</p>
                        <p><strong>Change:</strong> @sale.Change €</p>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<Sale> sales = new();
    private HubConnection? hubConnection;
    private int? expandedSaleId;

    protected override async Task OnInitializedAsync()
    {
        sales = await Http.GetFromJsonAsync<List<Sale>>("https://localhost:7150/api/sales");

        hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7150/saleHub")
            .Build();

        // Listen for new sales
        hubConnection.On<Sale>("ReceiveNewSale", (sale) =>
        {
            sales.Add(sale);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private void ToggleSaleDetails(int saleId)
    {
        expandedSaleId = expandedSaleId == saleId ? (int?)null : saleId;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
