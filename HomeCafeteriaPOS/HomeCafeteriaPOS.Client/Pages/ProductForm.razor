@using Microsoft.AspNetCore.Components.Forms
@using global::HomeCafeteriaPOS.Client.Models
@inject HttpClient Http

<EditForm Model="@EditingProduct" OnValidSubmit="HandleSave" class="needs-validation" novalidate>
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <div class="mb-2">
        <label for="name" class="form-label">Product Name</label>
        <input id="name" type="text" @bind="EditingProduct.Name" class="form-control" placeholder="Enter product name" required />
        <div class="invalid-feedback">Product name is required.</div>
    </div>

    <div class="mb-2">
        <label for="ImageUrl" class="form-label">Image URL</label>
        <input id="ImageUrl" type="text" @bind="EditingProduct.ImageUrl" class="form-control" placeholder="Enter image URL" />
        @if (!string.IsNullOrEmpty(EditingProduct.ImageUrl))
        {
            <img src="@EditingProduct.ImageUrl" alt="Product Image" class="mt-3" style="max-width: 100px; max-height: 100px;" />
        }
    </div>

    <div class="row">
        <div class="col-md-6">
            <label for="price" class="form-label">Price</label>
            <input id="price" type="number" step="0.01" @bind="EditingProduct.Price" class="form-control" placeholder="Enter price" required />
            <div class="invalid-feedback">Price is required and must be valid.</div>
        </div>

        <div class="col-md-6">
            <label for="stockQuantity" class="form-label">Stock Quantity</label>
            <input id="stockQuantity" type="number" @bind="EditingProduct.Quantity" class="form-control" placeholder="Enter stock quantity" required />
            <div class="invalid-feedback">Stock quantity is required.</div>
        </div>
    </div>

    <div class="d-flex justify-content-end gap-2 mt-4">
        <button type="submit" class="btn btn-primary">
            <i class="bi bi-check-circle me-1"></i> Save
        </button>
        <button type="button" @onclick="HandleCancel" class="btn btn-secondary">
            <i class="bi bi-x-circle me-1"></i> Cancel
        </button>
    </div>
</EditForm>

@code {
    [Parameter] public Product EditingProduct { get; set; } = new Product();
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private async Task HandleSave()
    {
        if (OnSave.HasDelegate)
        {
            await OnSave.InvokeAsync();
        }
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }
}

